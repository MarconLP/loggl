// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model ApiToken {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  name   String
  token  String
  userId String
}

model PushToken {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  userId    String
  timestamp DateTime @default(now())
}

model Project {
  id           String         @id @default(cuid())
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  name         String
  channels     Channel[]
  Notification Notification[]
  userId       String
}

model Channel {
  id           String         @id @default(cuid())
  name         String
  Notification Notification[]
  project      Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    String
}

model Notification {
  id          String   @id @default(cuid())
  channel     Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  event       String
  description String
  icon        String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  channelId   String
  timestamp   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String         @id @default(cuid())
  name                 String?
  email                String?        @unique
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  sessions             Session[]
  projects             Project[]
  notifications        Notification[]
  apiToken             ApiToken[]
  pushTokens           PushToken[]
  completed_onboarding Boolean        @default(false)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
